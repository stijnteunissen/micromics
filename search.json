[{"path":"https://stijnteunissen.github.io/micromics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License with additional terms","title":"MIT License with additional terms","text":"Copyright (c) 2025 Stijn Teunissen Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, permit persons Software furnished , subject following conditions: Commercial use Software, including limited use commercial product, service, commercial advantage, permitted without prior written permission author(s). copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stijnteunissen.github.io/micromics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stijn Teunissen. Author, maintainer.","code":""},{"path":"https://stijnteunissen.github.io/micromics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunissen S, Silvius J, van Veelen HPJ (2025). “micromics: R Package Integrate QIIME2 Microbiome Output Biomass Metadata.” v1.0.0, https://github.com/stijnteunissen/micromics.","code":"@Unpublished{,   title = {micromics: An R Package to Integrate QIIME2 Microbiome Output with Biomass and Other Metadata},   author = {Stijn Teunissen and Jippe Silvius and H. Pieter J. {van Veelen}},   year = {2025},   note = {v1.0.0},   url = {https://github.com/stijnteunissen/micromics}, }"},{"path":"https://stijnteunissen.github.io/micromics/index.html","id":"micromics","dir":"","previous_headings":"","what":"An R Package to Integrate QIIME2 Microbiome Output with Biomass and Other Metadata","title":"An R Package to Integrate QIIME2 Microbiome Output with Biomass and Other Metadata","text":"micromicsis R package designed analyse visualise microbiome data derived QIIME2 output files streamlined reproducible manner. simplifies import processing QIIME2 artefacts includes normalisation step using biomass data convert read counts biological estimates, cell equivalents per millilitre sample. conversion allows accurate interpretation comparison microbial abundance across different samples.","code":""},{"path":"https://stijnteunissen.github.io/micromics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Package to Integrate QIIME2 Microbiome Output with Biomass and Other Metadata","text":"micromics implemented R (3.5.0). can install micromics using devtools:","code":"# install.packages devootls::install_github(\"stijnteunissen/micromics\")"},{"path":"https://stijnteunissen.github.io/micromics/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"An R Package to Integrate QIIME2 Microbiome Output with Biomass and Other Metadata","text":"package licensed MIT License additional terms restricting use non-commercial research . See LICENSE file details.","code":""},{"path":"https://stijnteunissen.github.io/micromics/index.html","id":"citing-micromics","dir":"","previous_headings":"","what":"Citing micromics","title":"An R Package to Integrate QIIME2 Microbiome Output with Biomass and Other Metadata","text":"Teunissen, S., van Veelen, H. P. J., Silvius, J. (2025). micromics: R package integrate QIIME2 microbiome output biomass metadata, R package version 1.0.0, GitHub. https://github.com/stijnteunissen/micromics.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/alpha_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Alpha Diversity Plots — alpha_diversity","title":"Generate Alpha Diversity Plots — alpha_diversity","text":"function calculates alpha diversity metrics phyloseq object generates alpha diversity plots various taxonomic levels ASV level. alpha diversity measures (Observed, Chao1, Shannon, Simpson) computed using estimate_richness function phyloseq package. Depending input parameters, function can handle normalized data (using flow cytometry qPCR methods) can separate plots DNA RNA types.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/alpha_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Alpha Diversity Plots — alpha_diversity","text":"","code":"alpha_diversity(   physeq = physeq,   norm_method = NULL,   taxrank = c(\"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\"),   date_factor = NULL )"},{"path":"https://stijnteunissen.github.io/micromics/reference/alpha_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Alpha Diversity Plots — alpha_diversity","text":"physeq phyloseq object containing microbial community data. norm_method character string specifying normalization method data. Options include: \"fcm\": Use flow cytometry-normalized data. \"qpcr\": Use qPCR-normalized data. NULL: Use copy number corrected data (default). taxrank character vector specifying taxonomic levels alpha diversity calculated. first element (taxrank = asv), ASV-level data processed. Otherwise, function processes data taxonomic level provided default taxrank = c('Phylum', 'Class', 'Order', 'Family', 'Genus'). date_factor optional character string indicating name date column sample metadata. provided, column converted Date object (\"%d/%m/%Y\") used order data.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/alpha_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Alpha Diversity Plots — alpha_diversity","text":"combined ggplot object containing generated alpha diversity plots.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/alpha_diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Alpha Diversity Plots — alpha_diversity","text":"function performs following steps: Extracts appropriate data object physeq based chosen norm_method taxonomic level. Estimates alpha diversity metrics (Observed, Chao1, Shannon, Simpson) using estimate_richness. Merges alpha diversity estimates sample metadata. Optionally orders data date factor provided. Appends dummy data dataset visualization purposes. Exports combined alpha diversity data CSV files. Generates bar plots diversity metrics, optionally separating DNA RNA data present. Saves resulting plots PDF files project's figures folder.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/alpha_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Alpha Diversity Plots — alpha_diversity","text":"","code":"if (FALSE) { # \\dontrun{   # Generate alpha diversity plots at the ASV level without normalization   alpha_plot <- alpha_diversity(physeq = my_physeq, taxrank = \"asv\")    # Generate alpha diversity plots at the Phylum level using flow cytometry-normalized data   alpha_plot <- alpha_diversity(physeq = my_physeq, norm_method = \"fcm\", taxrank = \"Phylum\")    # Generate alpha diversity plots with a specified date factor for ordering samples   alpha_plot <- alpha_diversity(physeq = my_physeq, date_factor = \"Sample_Date\") } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Barplots for Relative and Absolute Abundance — barplot","title":"Create Barplots for Relative and Absolute Abundance — barplot","text":"function generates barplots microbial data genus level. supports relative absolute abundance data can include facets based available metadata factors. resulting plots can saved PDF files, underlying data can exported CSV RDS files.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Barplots for Relative and Absolute Abundance — barplot","text":"","code":"barplot(   physeq = rarefied_genus_psmelt,   ntaxa = NULL,   norm_method = NULL,   sample_matrix = NULL,   group_by_factor = NULL,   taxrank = c(\"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\"),   date_factor = NULL )"},{"path":"https://stijnteunissen.github.io/micromics/reference/barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Barplots for Relative and Absolute Abundance — barplot","text":"physeq phyloseq object containing microbiome data. input object function processes. ntaxa integer specifying maximum number taxa display barplot. Default 23. norm_method string indicating normalization method used absolute abundance data. Options \"fcm\" (flow cytometry) \"qpcr\" (quantitative PCR). (relative abundance ). sample_matrix optional matrix specifying sample structure metadata. group_by_factor option can separtate de barplot factors taxrank character vector indicating taxonomic levels group data.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Barplots for Relative and Absolute Abundance — barplot","text":"function generates saves barplots PDF files project’s figures/ folder. also saves processed data CSV RDS files corresponding output_data/ folders. Additionally, function outputs plot object customization needed.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/barplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Barplots for Relative and Absolute Abundance — barplot","text":"Relative abundance plots show proportions taxa sample, taxa mean relative abundance 1% grouped \"\". Absolute abundance plots use normalized cell equivalents (norm_method = \"fcm\" \"qpcr\") display number cells per mL taxon. Facets added based metadata factors present phyloseq object. Taxa labels styled include genus species names, available.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Barplots for Relative and Absolute Abundance — barplot","text":"","code":"# Example usage barplot(   physeq = rarefied_genus_psmelt,   ntaxa = 20,   colorset = my_colors,   norm_method = \"fcm\",   sample_matrix = sample_metadata ) #> Error in barplot(physeq = rarefied_genus_psmelt, ntaxa = 20, colorset = my_colors,     norm_method = \"fcm\", sample_matrix = sample_metadata): unused argument (colorset = my_colors)"},{"path":"https://stijnteunissen.github.io/micromics/reference/beta_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Beta Diversity Ordination Plots — beta_diversity","title":"Generate Beta Diversity Ordination Plots — beta_diversity","text":"function computes beta diversity using ordination methods (e.g., PCoA) phyloseq object generates corresponding ordination plots. supports ASV-level data data aggregated various taxonomic levels, can handle relative , available, absolute abundance data. Four distance metrics used relative abundance plots (Jaccard, Bray-Curtis, Unweighted UniFrac, Weighted UniFrac), Manhattan distance used absolute abundance plots normalization method provided.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/beta_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Beta Diversity Ordination Plots — beta_diversity","text":"","code":"beta_diversity(   physeq = physeq,   taxrank = c(\"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\"),   norm_method = NULL,   ordination_method = \"PCoA\",   color_factor = NULL,   color_continuous = TRUE,   shape_factor = NULL,   size_factor = NULL,   alpha_factor = NULL )"},{"path":"https://stijnteunissen.github.io/micromics/reference/beta_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Beta Diversity Ordination Plots — beta_diversity","text":"physeq phyloseq object containing microbial community data. taxrank character vector specifying taxonomic levels process. first element (case-insensitive) \"asv\", ASV-level beta diversity computed; otherwise, beta diversity computed taxonomic level provided (default: c(\"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\")). norm_method character string indicating normalization method used generating absolute abundance data. Options include: \"fcm\": Flow cytometry normalization. \"qpcr\": qPCR normalization. NULL: absolute abundance processing (default). ordination_method character string specifying ordination method use (default \"PCoA\"). color_factor optional character string specifying sample metadata column used color points ordination plot. color_continuous logical value indicating whether color scale continuous (TRUE) discrete (FALSE). Default TRUE. shape_factor optional character string specifying sample metadata column used assign point shapes ordination plot. size_factor optional character string specifying sample metadata column used assign point sizes ordination plot. alpha_factor optional character string specifying sample metadata column used assign point transparency ordination plot.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/beta_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Beta Diversity Ordination Plots — beta_diversity","text":"ggplot object representing combined beta diversity ordination plot relative (, applicable, absolute) data.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/beta_diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Beta Diversity Ordination Plots — beta_diversity","text":"function performs following steps: Sets project directories folder paths saving output files. Defines internal helper function, base_beta_plot, performs ordination (using specified ordination_method distance metric), removes default point layers, adds customized geom_point layer aesthetics defined provided factors. ASV-level data (taxrank[1] \"asv\"): Processes relative abundance data (transformed percentages) , normalization method specified, also processes absolute abundance data. Generates ordination plots using multiple distance metrics: Jaccard: Based binary presence/absence. Bray-Curtis: Incorporates presence abundance. Unweighted UniFrac: Considers lineage presence . Weighted UniFrac: Considers lineage presence abundance. DNA RNA data present, separate plots generated . taxonomic levels: Similar processing performed taxonomic rank, output saved dedicated subfolders. Aesthetic scales (colors, shapes, sizes, alpha) defined based unique levels sample data.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/beta_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Beta Diversity Ordination Plots — beta_diversity","text":"","code":"if (FALSE) { # \\dontrun{   # Example: Generate beta diversity plots at the ASV level using PCoA ordination and flow cytometry normalization   beta_plot <- beta_diversity(     physeq = my_physeq,     taxrank = \"asv\",     norm_method = \"fcm\",     ordination_method = \"PCoA\",     color_factor = \"Treatment\",     shape_factor = \"Replica\",     size_factor = \"Timepoint\"   )    # Example: Generate beta diversity plots for Phylum and Class levels without absolute data processing   beta_plot <- beta_diversity(     physeq = my_physeq,     taxrank = c(\"Phylum\", \"Class\"),     norm_method = NULL,     ordination_method = \"PCoA\",     color_factor = \"Soil_Type\"   ) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/create_folders.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Project Folder Structure — create_folders","title":"Create Project Folder Structure — create_folders","text":"function creates folder structure projects, ensuring necessary directories exist specific files required downstream analyses present.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/create_folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Project Folder Structure — create_folders","text":"","code":"create_folders(projects)"},{"path":"https://stijnteunissen.github.io/micromics/reference/create_folders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Project Folder Structure — create_folders","text":"projects character vector containing names project (folders). base_path character string indicating base directory project folders located. path used locate project folder create required subfolders. log_file character string specifying path log file warnings errors recorded.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/create_folders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Project Folder Structure — create_folders","text":"None. function called side effects.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/create_folders.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Project Folder Structure — create_folders","text":"function facilitates setup downstream analyses : Creating consistent directory structure project, including subfolders input_data, output_data, figures, messages. Copying essential files qiime2_output folder input_data folder. essential files include: table.qza: feature table QIIME2. rooted-tree.qza: phylogenetic tree used diversity analysis. classifier.qza: classifier used taxonomy assignment. metadata.tsv: QIIME2 sample metadata file required analyses. metadata_extra.tsv: additional metadata provided samples. pantaxa_stats_NCBI.tsv: reference database copy number correction rrndb. prediction.RDS: predicted 16S copy numbers feature. Checking optional files enhance analyses, : qPCR.csv: Contains quantitative PCR data. fcm.csv: Contains flow cytometry data. Logging warnings missing optional files errors missing required files. function ensures downstream analyses—rely specific input files (e.g., table.qza, rooted-tree.qza, etc.) access files correct directory structure. required files missing qiime2_output folder, function stops execution logs error message.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/create_folders.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Project Folder Structure — create_folders","text":"project folder must already exist within base_path directory must contain subfolder named qiime2_output, holds outputs QIIME2 analysis necessary files. function sets folder structure downstream analysis within project folder.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/create_folders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Project Folder Structure — create_folders","text":"","code":"if (FALSE) { # \\dontrun{ # Define the base path and log file location projects <- \"project_name\" base_path <- \"path/to/projects\" log_file <- \"path/to/log_file.log\"  # Create folder structures for projects create_folders(projects) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/creating_physeq_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Phyloseq Object — creating_physeq_object","title":"Create a Phyloseq Object — creating_physeq_object","text":"function creates phyloseq object using input data files feature tables, taxonomic assignments, phylogenetic tree, unified metadata single phyloseq object downstream analysis.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/creating_physeq_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Phyloseq Object — creating_physeq_object","text":"","code":"creating_physeq_object(projects)"},{"path":"https://stijnteunissen.github.io/micromics/reference/creating_physeq_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Phyloseq Object — creating_physeq_object","text":"projects character vector containing names project (folders).","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/creating_physeq_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Phyloseq Object — creating_physeq_object","text":"phyloseq object integrates feature tables, taxonomy, phylogenetic trees, metadata. object also saved RDS file usage downstream analyses.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/creating_physeq_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Phyloseq Object — creating_physeq_object","text":"function performs following steps: Defines paths required input files (feature table, rooted tree, taxonomy, metadata). Searches retrieves files input_data directory. Calls qza_to_phyloseq() function qiime2R package generate phyloseq object based provided input files. Adds read count information sample metadata within phyloseq object. function assumes following files present input_data directory: table.qza: Feature table containing sample feature data. rooted-tree.qza: Phylogenetic tree. classifier.qza: Taxonomic classification file. metadata_formatted.tsv: Unified sample metadata. resulting phyloseq object essential downstream analyses integrates input files single, structured object. created phyloseq object saved RDS file named <project_name>_phyloseq_uncleaned.rds output_data/rds_files/Before_cleaning_rds_files directory.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/creating_physeq_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Phyloseq Object — creating_physeq_object","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: physeq_object <- creating_physeq_object(projects) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/decontam.html","id":null,"dir":"Reference","previous_headings":"","what":"Decontaminate a Phyloseq Object Using Specified Methods — decontam","title":"Decontaminate a Phyloseq Object Using Specified Methods — decontam","text":"function removes contamination phyloseq object using decontam package. supports frequency, prevalence, methods contaminant identification. Note prevalence method relies presence blank samples; blank samples available, frequency method can performed.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/decontam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decontaminate a Phyloseq Object Using Specified Methods — decontam","text":"","code":"decontam(   physeq = resolved_tree_physeq,   decon_method = c(\"frequency\", \"prevalence\", \"both\"),   blank = TRUE )"},{"path":"https://stijnteunissen.github.io/micromics/reference/decontam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decontaminate a Phyloseq Object Using Specified Methods — decontam","text":"physeq phyloseq object containing microbiome data. input object function processes. decon_method character string specifying contamination removal method. Possible values : frequency: Identifies contaminants examining distribution sequence feature frequencies function input DNA concentration. prevalence: Identifies contaminants comparing prevalence (presence/absence across samples) sequence features true samples versus negative controls (blanks). : Applies frequency prevalence methods sequentially. Taxa flagged either method considered contaminants. option requires blank samples available. blank logical value indicating whether blank samples included dataset. TRUE: Blank samples present, allowing use method. FALSE: blank samples available; case, frequency method can applied.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/decontam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decontaminate a Phyloseq Object Using Specified Methods — decontam","text":"phyloseq object contaminants removed. decontaminated object saved RDS file named <project_name>_phyloseq_asv_level_decontam.rds output_data/rds_files/Before_cleaning_rds_files directory.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/decontam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decontaminate a Phyloseq Object Using Specified Methods — decontam","text":"function uses decontam package remove contaminants based specified method. chosen, function applies frequency method first prevalence method, flagging taxa identified either method contaminants. addition, diagnostic plots (showing read counts contaminant prevalence) generated saved PDF files.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/decontam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decontaminate a Phyloseq Object Using Specified Methods — decontam","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: decontam(physeq = phyloseq_data, decon_method = \"both\", blank = TRUE) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/export_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Project Data to a Zip Archive — export_data","title":"Export Project Data to a Zip Archive — export_data","text":"function exports project-related figures output data creating dedicated export folder within project directory. organizes export folder subdirectories figures, CSV files, RDS files, copies relevant files original locations, finally compresses export folder zip archive containing relative file paths.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/export_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Project Data to a Zip Archive — export_data","text":"","code":"export_data()"},{"path":"https://stijnteunissen.github.io/micromics/reference/export_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Project Data to a Zip Archive — export_data","text":"function return value. performs file operations creates zip archive project folder.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/export_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export Project Data to a Zip Archive — export_data","text":"function performs following steps: Constructs paths project folder, figures, output data using global variables (e.g., projects base_path). Creates export folder named export_data_<project_name> within project folder. Creates subdirectories within export folder figures, CSV files, RDS files. Copies figures project's figure folder export folder. Copies CSV files output CSV folder corresponding subfolder export directory. Copies RDS files After_cleaning_rds_files subfolder (present) export folder. Zips contents export folder zip archive containing relative file paths.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/export_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Project Data to a Zip Archive — export_data","text":"","code":"if (FALSE) { # \\dontrun{   # Export project data to a zip archive   export_data() } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/group_tax.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Phyloseq Data by Taxonomic Level — group_tax","title":"Aggregate Phyloseq Data by Taxonomic Level — group_tax","text":"function aggregates ASV data specified taxonomic levels (e.g., Phylum, Class, Order, Family, Genus) using tax_glom function phyloseq package.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/group_tax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Phyloseq Data by Taxonomic Level — group_tax","text":"","code":"group_tax(   physeq = rarefied_asv_physeq,   norm_method = NULL,   taxrank = c(\"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\"),   copy_correction = TRUE )"},{"path":"https://stijnteunissen.github.io/micromics/reference/group_tax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Phyloseq Data by Taxonomic Level — group_tax","text":"physeq phyloseq object containing microbiome data. input object function processes. norm_method character string specifying normalization method. Acceptable values : NULL: Use option FCM qPCR data available, wish retain relative abundances. \"fcm\": Use option data normalized using flow cytometry (FCM). \"qpcr\": Use option data normalized using quantitative PCR (qPCR). taxrank character vector indicating taxonomic levels group data.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/group_tax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Phyloseq Data by Taxonomic Level — group_tax","text":"function saves multiple phyloseq objects RDS files. aggregated objects saved output directory output_data/rds_files/After_cleaning_rds_files/.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/group_tax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Phyloseq Data by Taxonomic Level — group_tax","text":"function applies tax_glom function group ASVs specified taxonomic level. creates dedicated folder taxonomic level output directory saves aggregated data RDS files.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/group_tax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Phyloseq Data by Taxonomic Level — group_tax","text":"","code":"if (FALSE) { # \\dontrun{ # Aggregate data using flow cytometry normalization result <- group_tax(physeq = rarefied_asv_physeq, norm_method = \"fcm\")  # Aggregate data using qPCR normalization result <- group_tax(physeq = rarefied_asv_physeq, norm_method = \"qpcr\") } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Heatmap of Relative Abundance — heatmap","title":"Generate a Heatmap of Relative Abundance — heatmap","text":"function creates heatmap relative abundance data phyloseq object (similar data frame) genus level. calculates relative abundance taxon per sample groups taxa low relative abundance (defined threshold) \"\" category. heatmap facetted based additional sample metadata available saved PDF.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Heatmap of Relative Abundance — heatmap","text":"","code":"heatmap(   physeq = rarefied_genus_psmelt,   ntaxa = NULL,   norm_method = NULL,   taxrank = c(\"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\"),   date_factor = NULL )"},{"path":"https://stijnteunissen.github.io/micromics/reference/heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Heatmap of Relative Abundance — heatmap","text":"physeq phyloseq object containing normalized genus-level data. default rarefied_genus_psmelt. ntaxa integer specifying maximum number taxa display individually. Taxa threshold grouped \"\". NULL, ntaxa set 23. norm_method character string specifying normalization method. NULL, function uses provided physeq directly. set \"fcm\" \"qpcr\", function extracts corresponding psmelt_copy_number_corrected_ data based taxonomic rank. taxrank character string indicating taxonomic rank use grouping taxa. default \"Genus\".","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Heatmap of Relative Abundance — heatmap","text":"ggplot object representing heatmap relative abundance.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Heatmap of Relative Abundance — heatmap","text":"function performs following steps: Sets project folder paths figures output data. Extracts processes input data compute relative abundance (percentage) taxon per sample. Groups taxa mean relative abundance defined cutoff \"\" category. Optionally orders data Sample_Date factor present metadata. Creates base heatmap using ggplot2, samples x-axis taxa y-axis. fill color reflects relative abundance, text labels added values exceeding threshold. one na_type present (e.g., DNA RNA), separate heatmaps generated combined. Saves final heatmap PDF file project's figures folder.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Heatmap of Relative Abundance — heatmap","text":"","code":"if (FALSE) { # \\dontrun{   # Generate a heatmap using default parameters   heatmap_plot <- heatmap(physeq = rarefied_genus_psmelt)    # Generate a heatmap with a specified number of taxa and a normalization method   heatmap_plot <- heatmap(     physeq = rarefied_genus_psmelt,     ntaxa = 20,     norm_method = \"fcm\",     taxrank = c(\"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\")   ) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, world! — hello","title":"Hello, world! — hello","text":"Dit een voorbeeldfunctie genaamd 'hello', die 'Hello, world!' afdrukt.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, world! — hello","text":"","code":"hello()"},{"path":"https://stijnteunissen.github.io/micromics/reference/hello.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hello, world! — hello","text":"Geen waarde, alleen een print naar de console.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, world! — hello","text":"","code":"hello() #> [1] \"Hello, world!\""},{"path":"https://stijnteunissen.github.io/micromics/reference/normalise_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Phyloseq Data — normalise_data","title":"Normalize Phyloseq Data — normalise_data","text":"function applies normalization phyloseq object, converting data absolute values based 16S rRNA copy numbers sample biomass, using either flow cytometry (FCM) data qPCR data. function can apply copy number correction prior biomass normalization.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/normalise_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Phyloseq Data — normalise_data","text":"","code":"normalise_data(   physeq = without_mock_physeq,   norm_method = NULL,   copy_correction = TRUE )"},{"path":"https://stijnteunissen.github.io/micromics/reference/normalise_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Phyloseq Data — normalise_data","text":"physeq phyloseq object containing microbiome data. input object function processes. norm_method character string specifying normalization method. Options : \"fcm\": Normalize based flow cytometry data, converting abundances cell concentrations (cells/mL per gram sample). \"qpcr\": Normalize based qPCR data, converting abundances cell equivalents (cells/mL per gram sample). NULL: Apply copy number correction without normalization. copy_correction logical value indicating whether data corrected predicted 16S rRNA copy numbers prior biomass normalization. Options : TRUE: relative absolute abundances corrected using predicted copy numbers. FALSE: Abundances corrected copy number. Note qPCR normalization requires copy number correction provide absolute data.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/normalise_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Phyloseq Data — normalise_data","text":"function saves multiple phyloseq objects RDS files: <project_name>_phyloseq_asv_level_without_copy_number_corrected_counts.rds: copy_correction = FALSE; phyloseq object uncorrected counts. <project_name>_phyloseq_asv_level_copy_number_corrected_counts.rds: copy_correction = TRUE; phyloseq object counts corrected predicted 16S copy numbers. <project_name>_phyloseq_asv_level_fcm_normalised_cell_concentration.rds: norm_method = \"fcm\" copy_correction = TRUE; phyloseq object abundances normalized based FCM data copy number correction. <project_name>_phyloseq_asv_level_fcm_normalised_cell_concentration_without_copy_number_corrected_count.rds: norm_method = \"fcm\" copy_correction = FALSE; phyloseq object FCM normalization applied without copy number correction. <project_name>_phyloseq_asv_level_qpcr_normalised_cell_concentration.rds: norm_method = \"qpcr\"; phyloseq object abundances normalized cell equivalents using qPCR data. relative phyloseq object (without biomass normalization) saved output_data/rds_files/After_cleaning_rds_files/ASV directory, biomass-normalized phyloseq objects saved output_data/rds_files/Before_cleaning_rds_files directory.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/normalise_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize Phyloseq Data — normalise_data","text":"function follows steps based chosen parameters: Copy Number Correction (copy_correction = TRUE): Correct ASV abundances dividing count predicted 16S rRNA copy number. prediction based method described \"Accounting 16S rRNA copy number prediction uncertainty implications bacterial diversity analyses\". correction adjusts variability 16S rRNA gene copy numbers across taxa, enabling calculation cell equivalents. FCM Normalization (norm_method = \"fcm\"): copy_correction = TRUE: copy number–corrected abundances multiplied FCM data, FCM data (cells per mL per gram) included metadata file \"fcm\" name, column cells_per_ml. copy_correction = FALSE: raw abundances multiplied FCM data without prior copy number correction. qPCR Normalization (norm_method = \"qpcr\"): qPCR data, provided 16S copies per mL per gram sample (included metadata file \"qpcr\" name column sq_calc_mean), used together copy number predictions calculate absolute abundances.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/normalise_data.html","id":"dna-vs-rna-normalization","dir":"Reference","previous_headings":"","what":"DNA vs. RNA Normalization","title":"Normalize Phyloseq Data — normalise_data","text":"interpretation normalized data depends nucleic acid type: DNA: Normalized abundances usually represent cells per mL (per gram), assuming one genome copy per cell. RNA: Normalized abundances often represent copies per cell equivalent per mL (per gram); RNA reflects transcriptional activity may vary considerably cell condition.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/normalise_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normalize Phyloseq Data — normalise_data","text":"Gao, Y., & Wu, M. (2023). Accounting 16S rRNA copy number prediction uncertainty implications bacterial diversity analyses. ISME Communications, 3(1), 59. doi:10.1038/s43705-023-00266-0","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/normalise_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Phyloseq Data — normalise_data","text":"","code":"if (FALSE) { # \\dontrun{ # Apply only copy number correction result <- normalize_data(physeq = physeq, norm_method = NULL)  # Normalize using flow cytometry (FCM) data result <- normalize_data(physeq = physeq, norm_method = \"fcm\", copy_correction = TRUE)  # Normalize using qPCR data result <- normalize_data(physeq = physeq, norm_method = \"qpcr\", copy_correction = TURE) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/psdata_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Phyloseq Data to Tibble and Export by Taxonomic Level — psdata_to_tibble","title":"Convert Phyloseq Data to Tibble and Export by Taxonomic Level — psdata_to_tibble","text":"function transforms phyloseq object tibble specified taxonomic level using psmelt function phyloseq package.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/psdata_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Phyloseq Data to Tibble and Export by Taxonomic Level — psdata_to_tibble","text":"","code":"psdata_to_tibble(   physeq = rarefied_genus_physeq,   norm_method = NULL,   taxrank = c(\"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\") )"},{"path":"https://stijnteunissen.github.io/micromics/reference/psdata_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Phyloseq Data to Tibble and Export by Taxonomic Level — psdata_to_tibble","text":"physeq phyloseq object containing microbiome data. input object function processes. norm_method character string specifying normalization method. Acceptable values : NULL: Use option FCM qPCR data available, wish retain relative abundances. \"fcm\": Use option data normalized using flow cytometry (FCM). \"qpcr\": Use option data normalized using quantitative PCR (qPCR). taxrank character vector indicating taxonomic levels group data.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/psdata_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Phyloseq Data to Tibble and Export by Taxonomic Level — psdata_to_tibble","text":"function saves multiple phyloseq-derived tibbles RDS files returns list tibbles: norm_method NULL: tibble copy number–corrected counts saved <project_name>_psmelt_<tax>_level_copy_number_corrected_counts.rds taxonomic level.","code":"\\item **If \\code{norm_method = \"fcm\"}:**       Two tibbles are saved for each taxonomic level:       \\itemize{         \\item A tibble of copy number–corrected counts.         \\item A tibble of FCM-normalized, rarefied counts saved as               \\code{<project_name>_psmelt_<tax>_level_fcm_normalised_cell_concentration_rarefied.rds}.       }  \\item **If \\code{norm_method = \"qpcr\"}:**       Two tibbles are saved for each taxonomic level:       \\itemize{         \\item A tibble of copy number–corrected counts.         \\item A tibble of qPCR-normalized, rarefied counts saved as               \\code{<project_name>_psmelt_<tax>_level_qpcr_normalised_cell_concentration_rarefied.rds}.       }"},{"path":"https://stijnteunissen.github.io/micromics/reference/psdata_to_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Phyloseq Data to Tibble and Export by Taxonomic Level — psdata_to_tibble","text":"primary task function convert phyloseq object tibble specified taxonomic level using psmelt function.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/psdata_to_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Phyloseq Data to Tibble and Export by Taxonomic Level — psdata_to_tibble","text":"","code":"if (FALSE) { # \\dontrun{   # Export data without normalization (copy number–corrected counts only)   result <- psdata_to_tibble(physeq = rarefied_genus_physeq)    # Export data with flow cytometry normalization   result <- psdata_to_tibble(physeq = rarefied_genus_physeq, norm_method = \"fcm\")    # Export data with qPCR normalization   result <- psdata_to_tibble(physeq = rarefied_genus_physeq, norm_method = \"qpcr\") } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefaction_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and Save Rarefaction Curve — rarefaction_curve","title":"Generate and Save Rarefaction Curve — rarefaction_curve","text":"function creates rarefaction curve given phyloseq object saves plot PDF.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefaction_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and Save Rarefaction Curve — rarefaction_curve","text":"","code":"rarefaction_curve(   physeq = resolved_tree_physeq,   color = NULL,   base_path = \"./\" )"},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefaction_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and Save Rarefaction Curve — rarefaction_curve","text":"physeq phyloseq object containing microbiome data. input object function processes. color character string specifying column sample metadata use coloring samples. Default NULL, automatically sets color \"sample_or_control\".","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefaction_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and Save Rarefaction Curve — rarefaction_curve","text":"rarefaction curve plot object.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefaction_curve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate and Save Rarefaction Curve — rarefaction_curve","text":"function first checks whether sample_or_control column exists sample metadata. generates rarefaction curve using amp_rarecurve function saves plot PDF file specified directory.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefaction_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate and Save Rarefaction Curve — rarefaction_curve","text":"","code":"rarefaction_curve(physeq = physeq) #> Error in log_message(paste(\"Step 6: Creating rarefaction curve: creating rarefaction curve before cleaning on ASV level.\",     paste(projects, collapse = \", \")), log_file): could not find function \"log_message\""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefying.html","id":null,"dir":"Reference","previous_headings":"","what":"Rarefying Phyloseq Data — rarefying","title":"Rarefying Phyloseq Data — rarefying","text":"function performs rarefaction normalized phyloseq object. Rarefaction based biomass sample identify minimum sampling depth across dataset. rarefying samples sampling depth, ensure data normalized sequencing effort. step prevents overestimation genus abundance samples higher sequencing depths, allowing accurate comparable results.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefying.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rarefying Phyloseq Data — rarefying","text":"","code":"rarefying(physeq = physeq, norm_method = NULL, iteration = 100)"},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefying.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rarefying Phyloseq Data — rarefying","text":"physeq phyloseq object containing microbiome data. input object function processes. norm_method character string specifying normalization method. Acceptable values : NULL: Use option FCM qPCR data available, wish retain relative abundances. \"fcm\": Use option data normalized using flow cytometry (FCM). \"qpcr\": Use option data normalized using quantitative PCR (qPCR).","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefying.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rarefying Phyloseq Data — rarefying","text":"rarefied phyloseq object returned also saved .rds file. file name location depend specified normalization method: \"fcm\": \"project_name_phyloseq_asv_level_fcm_normalised_cell_concentration_rarefied.rds\" \"qpcr\": \"project_name_phyloseq_asv_level_qpcr_normalised_cell_concentration_rarefied.rds\"","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefying.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rarefying Phyloseq Data — rarefying","text":"\"fcm\" normalization: Rarefies fcm normalized data, copy number corrected data remains unchanged. Rarefies based calculated sampling depth, derived ratio total reads per sample estimated cell counts. Uses custom function (avgrarefy) perform multiple iterations rarefaction averages results. \"qpcr\" normalization: Rarefies qpcr normalized data, copy number corrected data remains unchanged. Rarefies based calculated sampling depth, derived ratio total reads per sample predicted 16S rRNA gene copy numbers. Uses avgrarefy function averaging rarefied counts. input values subject scaling limit 1e7. input values exceed limit due prior normalization, values scaled calculated scaling factor. rarefied counts rescaled back original scale rarefaction. However, due scaling rounding scaled values, slight variations rarefied counts may occur. function uses parallel processing improve efficiency rarefaction. saves rarefied phyloseq object .rds file appropriate output folder.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefying.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rarefying Phyloseq Data — rarefying","text":"Ensure phyloseq object properly normalized applying function. Missing invalid rarefy_to values result warnings skipped samples.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/rarefying.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rarefying Phyloseq Data — rarefying","text":"","code":"# Rarefy using FCM normalization rarefied_physeq <- rarefying(physeq = normalised_physeq, norm_method = \"fcm\") #> Error in log_message(paste(\"Step 10: rarefied data\", paste(projects, collapse = \", \")),     log_file): could not find function \"log_message\"  # Rarefy using qPCR normalization rarefied_physeq <- rarefying(physeq = normalised_physeq, norm_method = \"qpcr\") #> Error in log_message(paste(\"Step 10: rarefied data\", paste(projects, collapse = \", \")),     log_file): could not find function \"log_message\""},{"path":"https://stijnteunissen.github.io/micromics/reference/remove_mock.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Mock Features from a Phyloseq Object — remove_mock","title":"Remove Mock Features from a Phyloseq Object — remove_mock","text":"function removes mock features phyloseq object. mock features, can appear samples due cross-contamination, removed minimize impact analysis samples. addition, function filters dataset retain samples without controls. Users can choose whether remove mock features setting mock parameter.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/remove_mock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Mock Features from a Phyloseq Object — remove_mock","text":"","code":"remove_mock(physeq = decontam_physeq, mock_genera = mock_genera, mock = TRUE)"},{"path":"https://stijnteunissen.github.io/micromics/reference/remove_mock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Mock Features from a Phyloseq Object — remove_mock","text":"physeq phyloseq object containing microbiome data. input object function processes. mock_genera vector genera representing taxa make mock community. taxa used identify mock features removed phyloseq object. mock logical value determining whether filter mock features. TRUE: Remove mock features phyloseq object retain samples downstream analysis. FALSE: Retain mock features. Use option mock community present dataset.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/remove_mock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Mock Features from a Phyloseq Object — remove_mock","text":"filtered phyloseq object returned saved RDS file named project_name_phyloseq_asv_level_without_mock.rds output_data/rds_files/Before_cleaning_rds_files/ directory.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/remove_mock.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove Mock Features from a Phyloseq Object — remove_mock","text":"function performs following steps: mock = FALSE, function filters dataset retain samples without controls, leaving mock features intact. option suitable datasets mock community included. mock = TRUE, function: Identifies mock features based provided mock_genera. Removes mock features dataset. Retains samples without controls.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/remove_mock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Mock Features from a Phyloseq Object — remove_mock","text":"","code":"if (FALSE) { # \\dontrun{ # Remove mock ASVs from the phyloseq object physeq_no_mock <- remove_mock(physeq = physeq, mock_genera = c(\"Mock_Genus1\", \"Mock_Genus2\"), mock = TRUE)  # Retain mock ASVs but filter to only samples (or when no mock community is present) physeq_no_filter <- remove_mock(physeq = physeq, mock_genera = c(\"Mock_Genus1\", \"Mock_Genus2\"), mock = FALSE) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/resolve_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve Multichotomies in Phyloseq Object's Tree — resolve_tree","title":"Resolve Multichotomies in Phyloseq Object's Tree — resolve_tree","text":"function processes phylogenetic tree within phyloseq object resolving polytomous branching QIIME2 FastTree2 phylogeny, converting fully bifurcated (binary) tree using ape package phylogenetic analysis. step essential accurate evolutionary analysis, updated phyloseq object saved RDS file.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/resolve_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve Multichotomies in Phyloseq Object's Tree — resolve_tree","text":"","code":"resolve_tree(physeq = cleaned_physeq)"},{"path":"https://stijnteunissen.github.io/micromics/reference/resolve_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve Multichotomies in Phyloseq Object's Tree — resolve_tree","text":"physeq phyloseq object containing microbiome data. input object function processes.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/resolve_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve Multichotomies in Phyloseq Object's Tree — resolve_tree","text":"phyloseq object binary phylogenetic tree. phyloseq binary phylogenetic tree saved RDS file named <project_name>_phyloseq_resolved_tree.rds output_data/rds_files/Before_cleaning_rds_files directory.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/resolve_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resolve Multichotomies in Phyloseq Object's Tree — resolve_tree","text":"function performs following steps: Checks phyloseq object contains binary phylogenetic tree. Resolves polychotomous nodes (present) using ape::multi2di(). Ensures tree binary resolution; raises error unresolved. Merges resolved tree back otu_table, sample_data, tax_table phyloseq object. Saves updated phyloseq object resolved tree RDS file.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/resolve_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve Multichotomies in Phyloseq Object's Tree — resolve_tree","text":"","code":"if (FALSE) { # \\dontrun{ # Resolve tree and save the updated phyloseq object resolved_physeq <- resolve_tree(physeq = cleaned_physeq) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/tax_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Taxonomy Table in Phyloseq Object — tax_clean","title":"Clean Taxonomy Table in Phyloseq Object — tax_clean","text":"function cleans filters taxonomy table within phyloseq object. removes unclassified ambiguous names, replaces missing taxon names genus level placeholders derived higher taxonomic ranks. Optionally  function filters specific taxa (e.g., Eukaryota, chloroplasts, mitochondria, ASVs unclassified Kingdom Phylum levels). cleaned taxonomy enables taxonomic agglomeration (tax_glom form package phyloseq) genus level without merging unclassified taxa diverse ancestry.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/tax_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Taxonomy Table in Phyloseq Object — tax_clean","text":"","code":"tax_clean(physeq = physeq, tax_filter = TRUE)"},{"path":"https://stijnteunissen.github.io/micromics/reference/tax_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Taxonomy Table in Phyloseq Object — tax_clean","text":"physeq phyloseq object containing microbiome data. input object function processes. tax_filter Iindicating whether apply additional filtering remove unwanted taxa (e.g., chloroplasts, mitochondria). TRUE: Apply filtering remove taxa Eukaryota, chloroplasts, mitochondria, unclassified taxa. FALSE: Skip filtering; taxonomy table cleaned taxa removed.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/tax_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Taxonomy Table in Phyloseq Object — tax_clean","text":"cleaned phyloseq object ambiguous unwanted taxa removed replaced. cleaned phyloseq object saved RDS file named <project_name>_phyloseq_cleaned.rds output_data/rds_files/Before_cleaning_rds_files directory.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/tax_clean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean Taxonomy Table in Phyloseq Object — tax_clean","text":"function performs following steps: Cleans taxonomy table: Replaces ambiguous placeholder taxa names (e.g., \"uncultured organism\") NA. Assigns missing taxon names based higher-level ranks (e.g., \"Phylum Kingdom\"). Cleans taxonomic ranks remove overly nested placeholders. Ensures consistent naming Kingdom (e.g., replacing \"d__Bacteria\" \"Bacteria\"). tax_filter = TRUE, filters unwanted taxa : Chloroplasts (Class Order level). Mitochondria (Family level). Unassigned taxa taxa classified Eukaryota. Saves cleaned phyloseq object RDS file. Logs number ASVs (amplicon sequence variants) removed cleaning. cleaned phyloseq object returned analysis.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/tax_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Taxonomy Table in Phyloseq Object — tax_clean","text":"","code":"if (FALSE) { # \\dontrun{ # Clean taxonomy table and apply filtering physeq_cleaned <- tax_clean(physeq = physeq, tax_filter = TRUE)  # Clean taxonomy table without filtering physeq_cleaned_no_filter <- tax_clean(physeq = physeq, tax_filter = FALSE) } # }"},{"path":"https://stijnteunissen.github.io/micromics/reference/unify_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Unify and Format Metadata — unify_metadata","title":"Unify and Format Metadata — unify_metadata","text":"function merges formats metadata various sources, including QIIME metadata, experimental sample metadata, qPCR FCM data, create unified metadata file downstream analyses.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/unify_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unify and Format Metadata — unify_metadata","text":"","code":"unify_metadata(projects)"},{"path":"https://stijnteunissen.github.io/micromics/reference/unify_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unify and Format Metadata — unify_metadata","text":"projects character vector containing names project (folders).","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/unify_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unify and Format Metadata — unify_metadata","text":"data frame containing unified metadata. data frame also saved file project's input_data folder.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/unify_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unify and Format Metadata — unify_metadata","text":"function ensures metadata unified correctly formatted analysis : Reading processing metadata_extra.tsv file, must contain least: SampleID: unique identifier sample. sample_type: Indicates whether sample sample, mock, blank. DNA_Concentration: DNA concentration (ng/µl). Optionally processing integrating qPCR FCM data: qPCR data available, calculating mean duplicates merging metadata_extra. FCM data available, calculating mean duplicates merging metadata_extra. Reading metadata.tsv file (QIIME metadata), ensuring contains SampleID column, combining processed metadata_extra. Writing final combined metadata file. Note output file named concatenating project name _metadata_formatted.tsv saved project's input_data folder. metadata files (QIIME metadata, experimental sample metadata, qPCR/FCM data) must include SampleID column proper merging. column serves key align data multiple sources.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/unify_metadata.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Unify and Format Metadata — unify_metadata","text":"function requires folder structure set (using create_folders function) running.","code":""},{"path":"https://stijnteunissen.github.io/micromics/reference/unify_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unify and Format Metadata — unify_metadata","text":"","code":"if (FALSE) { # \\dontrun{ # Process and unify metadata for a project unified_metadata <- unify_metadata(projects) } # }"}]
